#Functions_5. *args_**kwargs
# через * выводим множества значений. Выводятся первый и последний 
# как переменные a и c вне списка, остальные внутри. даже если здесь
# стоял бы кортеж, все равно выводится список.
a,*b,c=[True, 7,'hello', 9, 5, 3]
print(a,b,c)
#2 со стрингом создается тоже список, последние 2 буквы выводятся вне списка.
*a,b,c= 'tatti bope'
print(a,b,c)
#3 Вывод будет: [] 2 3
*a,b,c= [2,3]
print(a,b,c)
#4 ОШИБКА Если 1 значение, то выводится ошибка. наш список должен состоять
# как минимум из 2 элементов.
*a,b,c= [2]
print(a,b,c)
#5 функция range обходит от а до b. чтобы они вывелись на экран, 
# используем функцию list. Output: [1, 2, 3, 4]
s=[4,10]
print(list(range(1,5)))
# если будем вызывать s от нашего списка, то получим ошибку.
# НО ЕСЛИ поставим * то получим ожидаемый результат. Output: [4, 5, 6, 7, 8, 9]
print(list(range(*s))) 
#6
def f(a,b,c,d):
    print(a,b,c,d)
# можем вызывать несколькими способами
f(1,2,3,4)
a = ('hello', True, 78, [3,4,5])
# если просто вызовем a, то получим ошибку
f(a)
# a если вызовем со звездочкой, то все элементы
f(*a)
# *args
def f(*args):
    print(args)
f('bopeska', 'tatti kyz' 'altyn kyz', 11,22)    
# создаем цикл for
def f(*args):
    # посчитать сумму всех этих чисел. для этого создадим локальное 
    # переменное s
    s = 0
    #можно обойти элементы кортежа по значению
    for i in args:
        # к переменной s добавляем переменную i для определения всех
        # этих чисел
        s += i
        # в конце возвращаем нашу накопленную сумму
    return s
#  для того чтобы видеть результат функцию f обернуть в команду print 
print(f(55,566))
# kwargs = keyword args. через **kwargs передаем именнованные аргументы, можн любое имя дать функции
# главное чтоб 2 звездочки были. Создается словарь. Output: {'a': 1, 'b': 5, 'c': 6}
def f(**kwargs):
    print(kwargs)
f(a=1, b=5, c=6)
# чтобы обойти создание словаря, в цикле юзаем функцию items()
def f(**kwargs):
    for k, v in kwargs.items():
        print(k,v)
f(a=1, b=5, c=6)
# можно комбинировать *args и **kwargs
def f(*args, **kwargs):
        print(args, kwargs)
# первые выведутся в виде кортежа, именованные в виде словаря 
f(5,4,3,2,8, a=1, b=5, c='hello')

